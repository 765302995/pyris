#!/usr/bin/env python
# =============================================
# Script: pyris
# Package: PyRIS
# Author: Federico Monegaglia
# Date: April 2016
# Description: Wrapper script for PyRIS package
# =============================================

import os, sys, ast
import argparse

try:
    import ConfigParser
except ImportError:
    import configparser as ConfigParser

sys.path.append( os.curdir ) # XXX: Only in development version (i.e. if pyris is not installed)!!!!

class StoreDictSet( argparse.Action ):
    '''Read a Settings Dictionary from the command line and store it in the arguments' namespace'''
    def __call__( self, parser, namespace, str_settings, option_string=None ):
        settings = {}
        for option in str_settings:
            name, value = option.split( '=' )
            settings[ name ] = value
        if hasattr( namespace, 'settings' ):
            setattr( namespace, 'settings', dict( namespace.settings.items() + settings.items() ) )
        else:
            setattr( namespace, 'settings', settings )
        return None

class ParserException( Exception ): pass
    
# ============================
# Parse Command Line Arguments
# ============================
parser = argparse.ArgumentParser( description='PyRIS :: Python - RIvers from Satellite' )
# Config Settings
parser.add_argument( 'config', nargs='?', help='input configuration file' )
parser.add_argument( '-i', '--init', action='store_true', help='initialize a config file with default settings' )
parser.add_argument( '-s', '--set', nargs='*', action=StoreDictSet, type=str, help='set variable in config file' )
parser.add_argument( '--select-white-mask', type=str, help='interactively draw white masks from landsat data' )
parser.add_argument( '--select-black-mask', type=str, help='interactively draw black masks from landsat data' )
# Segmentation
parser.add_argument( '-S', '--segmentation', action='store_true', help='perform segmentation of all the landsat folders' )
parser.add_argument( '--label', type=str, help='if auto, pyris will try to label masks by itself. other options are max and all' )
parser.add_argument( '--clean-mask', nargs='*', help='manually remove some branches' )
# Skeletonization
parser.add_argument( '-K', '--skeletonization', action='store_true', help='skeletonize masks' )
# Axis Extraction
parser.add_argument( '-A', '--axis', action='store_true', help='extract main channel axis from channel mask' )
parser.add_argument( '--mask-dir', type=str, help='directory containing mask files' )
parser.add_argument( '--no-geo', action='store_true', help='do not georeference mask files' )
# Planform Migration
parser.add_argument( '-M', '--migration', action='store_true', help='compute migration rates of subsequent axis' )
parser.add_argument( '--use-wavelets', action='store_true', help='use inverse wavelet to filter curvature' )
parser.add_argument( '--bend-method', type=str, default='distance', help='method used to find inflection points' )
parser.add_argument( '--axis-files', nargs='+', help='ordered sequence of files for which the migration rates must be computed' )
parser.add_argument( '--axis-dir', type=str, help='dir in which to read ordered-by-name axis files (if --axis-files is not specified)' )
parser.add_argument( '--axis-columns', nargs=2, default=[0,1], help='columns containing axis coordinates' )
parser.add_argument( '--output-dir', default='migration_output', help='directory where outputs fof migration rates will be stored' )
parser.add_argument( '--filter-multiplier', default=0.33, help='multiplier of the wavelet filter' )
# Bars Position
## parser.add_argument( '-B', '--bars', action='store_true', help='compute the position of channel bars' )
## parser.add_argument( '--landsat-dirs', nargs='+', help='where landsat are stored' )
## parser.add_argument( '--migration-files', nargs='+', help='if called as standalone, requires migration-files and axis-files' )
## parser.add_argument( '--free-forced', action='store_true', help='free and forced bars are to be detected' )

# Parse Arguments
args = parser.parse_args()
# Initialize Config File
# ----------------------
if args.init:
    from pyris.config import default_config
    cf = default_config()
else:
    if args.config is not None:
        cf = ConfigParser.RawConfigParser()
        cf.read( args.config )
        if len( sys.argv ) == 2:
            print 'reading configuration file %s' % args.config
            for section in cf.sections():
                print '\n[%s]' % section
                for option in cf.options( section ):
                    print '%s = %s' % ( option, cf.get( section, option ) )
    else:
        if args.axis_files is None and args.axis_dir is None:
            e = 'Too few arguments. Either <config> or <axis files> must be given\n'
            parser.print_help()
            raise ParserException, e

# Individual Settings
# -------------------
if hasattr( args, 'settings' ):
    for section in cf.sections():
        for key, val in args.settings.iteritems():
            if cf.has_option( section, key ):
                cf.set( section, key, val )
                print 'Set: [%s] %s = %s' % ( section, key, val )

# Interactiverly Draw White Mask
# ------------------------------
if args.select_white_mask is not None:
    from pyris.misc import interactive_mask
    print 'Select white masks'
    white_masks = interactive_mask( args.select_white_mask )()
    cf.set( 'Segmentation', 'white_masks', white_masks )

# Interactiverly Draw Black Mask
# ------------------------------
if args.select_black_mask is not None:
    from pyris.misc import interactive_mask
    print 'Select black masks'
    black_masks = interactive_mask( args.select_black_mask )()
    cf.set( 'Segmentation', 'black_masks', black_masks )

# Store Configuration File
# ------------------------
if args.config is not None:
    with open( args.config, 'w' ) as cfg_file: cf.write( cfg_file )
    if args.init: print 'Configuration file %s created' % args.config


# ===================
# Run PyRIS Functions
# ===================

# Set Up PyRIS Environment
# ------------------------
if args.config is not None:
    geodir = os.path.join( cf.get( 'Data', 'output' ), 'geotransf' )
    maskdir = os.path.join( cf.get( 'Data', 'output' ), 'mask' )
    skeldir = os.path.join( cf.get( 'Data', 'output' ), 'skeleton' )
    axisdir = os.path.join( cf.get( 'Data', 'output' ), 'axis' )
    migdir = os.path.join( cf.get( 'Data', 'output' ), 'migration' )

# Perform Image Segmentation
# --------------------------
if args.segmentation:
    landsat_dirs = sorted( [ os.path.join(cf.get('Data','input'), f) for f in os.listdir(cf.get('Data','input'))
                             if os.path.isdir( os.path.join(cf.get('Data','input'), f) ) ] )
    if not os.path.isdir( maskdir ): os.makedirs( maskdir )
    if not os.path.isdir( geodir ): os.makedirs( geodir )
    from pyris import segment_all
    title = 'Running image segmentation over the external directory: %s' % cf.get( 'Data', 'input' )
    print; print title; print '-'*len(title)
    segment_all( landsat_dirs, geodir, cf, maskdir, auto_label=args.label )

# Manually Clean Masks
# --------------------
if args.clean_mask is not None:
    from pyris import clean_masks
    if len( args.clean_mask ) == 0:
        title = 'Manual cleaning of channel masks'
        print; print title; print '-'*len(title)
        if args.config is not None: clean_masks( maskdir, geodir=geodir, config=cf, file_only=False )
        else: clean_masks( maskdir )
    else:
        for f in args.clean_mask:
            title = 'Manual cleaning of mask files'
            print; print title; print '-'*len(title)
            if args.config is not None: clean_masks( f, geodir=geodir, config=cf, file_only=True )
            else: clean_masks( maskdir )


# Skeletonization
# ---------------
if args.skeletonization:
    if not os.path.isdir( skeldir ): os.makedirs( skeldir )
    if args.mask_dir is not None: maskdir = args.mask_dir
    from pyris import skeletonize_all
    title = 'Skeltonizing masks masks in internal directory: %s' % cf.get( 'Data', 'output' )
    print; print title; print '-'*len(title)
    skeletonize_all( maskdir, skeldir, cf )

# Extract Centerline
# ------------------
if args.axis:
    if not os.path.isdir( axisdir ): os.makedirs( axisdir )
    if args.mask_dir is not None: maskdir = args.mask_dir
    from pyris import vectorize_all
    title = 'Extracting centerlines from skeletons in internal directory: %s' % cf.get( 'Data', 'output' )
    print; print title; print '-'*len(title)
    vectorize_all( geodir, maskdir, skeldir, cf, axisdir, use_geo=(not args.no_geo) )

# Centerline Migration Rates
# --------------------------
if args.migration:
    from pyris import migration_rates
    if args.axis_files is None and args.axis_dir is None and args.config is not None:
        if not os.path.isdir( migdir ): os.makedirs( migdir )
        title = 'Computing migration rates from centerlines in internal directory: %s' % cf.get( 'Data', 'output' )
        print; print title; print '-'*len(title)
        axisfiles = [ os.path.join( axisdir, f ) for f in sorted( os.listdir( axisdir ) ) ]
        migration_rates( axisfiles, migdir, columns=(0,1), method=cf.get( 'Migration', 'bend_method' ),
                         use_wavelets=eval(cf.get( 'Migration', 'use_wavelets' )),
                         filter_multiplier=eval(cf.get( 'Migration', 'bend_separation_filter_reduction' )) )
    elif args.axis_files is not None and args.config is None:
        if not os.path.isdir( args.output_dir ): os.makedirs( args.output_dir )
        title = 'Computing migration rates from files: %s' % args.axis_files
        print; print title; print '-'*len(title)
        migration_rates( args.axis_files, args.output_dir, columns=args.axis_columns,
                         method=args.bend_method,
                         use_wavelets=args.use_wavelets,
                         filter_multiplier=eval(args.filter_multiplier) )
    elif args.axis_dir is not None and args.config is None:
        axis_files = [ os.path.join(args.axis_dir, f) for f in sorted(os.listdir(args.axis_dir)) ]
        if not os.path.isdir( args.output_dir ): os.makedirs( args.output_dir )
        title = 'Computing migration rates from directory: %s' % args.axis_dir
        print; print title; print '-'*len(title)
        migration_rates( axis_files, args.output_dir, columns=args.axis_columns,
                         method=args.bend_method,
                         use_wavelets=args.use_wavelets,
                         filter_multiplier=eval(args.filter_multiplier) )
    else:
        if args.axis_dir is not None and args.axis_files is not None:
            raise ParserException, '--axis-files or --axis-dir cannot be provided together'
        else:
            raise ParserException, 'Either --axis-files, --axis-dir or config must be provided'

# Bars Position
# -------------
## if args.bars:
##     from pyris import bars_detection
##     if args.axis_files is None and args.migration_files is None and args.config is not None:
##         if args.free_forced: raise NotImplementedError, 'free bars not yet implemented'
##         title = 'Decesting bars from centerlines in internal directory: %s' % cf.get( 'Data', 'output' )
##     elif args.axis_files is not None and args.migration_files is not None and args.config is None: 
##         if args.free_forced: raise NotImplementedError, 'free bars not yet implemented'

##     else:
##         raise ParserException, 'bars detection requires either axis files and migration files or config'


from pyris import make_curve_plots
landsat_dirs = sorted( [ os.path.join(cf.get('Data','input'), f) for f in os.listdir(cf.get('Data','input'))
                             if os.path.isdir( os.path.join(cf.get('Data','input'), f) ) ] )
make_curve_plots( axisdir, migdir, landsat_dirs )
